import pytest
import requests

@pytest.mark.usefixtures("base_url1", "channel_id", "headers", "message_id")
def test_create_message_with_text_and_attachment(base_url1, channel_id, headers):
    url = f"{base_url1}/channels/{channel_id}/messages"
    files = {
        'files[0]': ('test_image.png', open('test_image.png', 'rb'))
    }
    data = {
        'content': "–ö–∞–ª–¥—ã –ë–∞–ª–¥—ã."
    }
    headers.pop('Content-Type', None)
    response = requests.post(url, headers=headers, files=files, data=data)
    
    assert response.status_code == 200, "Expected 200, but got a different status code."
    message_id = response.json().get('id')
    assert message_id is not None, "Message ID is None"
    assert 'attachments' in response.json(), "No attachments in the response"

    print("–¢–µ—Å—Ç '–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –≤–ª–æ–∂–µ–Ω–∏–µ–º' –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

def test_get_message(base_url1, channel_id, headers, message_id):
    url = f"{base_url1}/channels/{channel_id}/messages/{message_id}"
    response = requests.get(url, headers=headers)
    assert response.status_code == 200
    assert response.json().get('id') == str(message_id)

    print("–¢–µ—Å—Ç '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è' –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

def test_get_messages_array(base_url1, channel_id, headers):
    url = f"{base_url1}/channels/{channel_id}/messages"
    params = {
        "limit": 50
    }
    response = requests.get(url, headers=headers, params=params)
    assert response.status_code == 200
    messages = response.json()
    assert isinstance(messages, list)
    assert len(messages) > 0

    print("–¢–µ—Å—Ç '–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π' –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

def test_add_reaction(base_url1, channel_id, headers, message_id):
    emoji = "üî•"
    emoji_encoded = requests.utils.quote(emoji)
    url = f"{base_url1}/channels/{channel_id}/messages/{message_id}/reactions/{emoji_encoded}/@me"
    response = requests.put(url, headers=headers)
    assert response.status_code == 204

    print("–¢–µ—Å—Ç '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏' –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

def test_remove_reaction(base_url1, channel_id, headers, message_id):
    emoji = "üî•"
    emoji_encoded = requests.utils.quote(emoji)
    add_reaction_url = f"{base_url1}/channels/{channel_id}/messages/{message_id}/reactions/{emoji_encoded}/@me"
    requests.put(add_reaction_url, headers=headers)
    
    remove_reaction_url = f"{base_url1}/channels/{channel_id}/messages/{message_id}/reactions/{emoji_encoded}/@me"
    response = requests.delete(remove_reaction_url, headers=headers)
    assert response.status_code == 204

    print("–¢–µ—Å—Ç '–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏' –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

def test_create_message_without_content(base_url1, channel_id, headers):
    url = f"{base_url1}/channels/{channel_id}/messages"
    data = {
        "content": ""
    }
    response = requests.post(url, headers=headers, json=data)
    assert response.status_code == 400, "Expected 400 for empty content, but got a different status code."
    print("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç '–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞' –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

def test_get_message_with_invalid_id(base_url1, channel_id, headers):
    invalid_message_id = "12345678901234567890"
    url = f"{base_url1}/channels/{channel_id}/messages/{invalid_message_id}"
    response = requests.get(url, headers=headers)
    assert response.status_code == 400, "Expected 400 for invalid message ID, but got a different status code."
    print("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID' –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

def test_add_reaction_to_nonexistent_message(base_url1, channel_id, headers):
    invalid_message_id = "12345678901234567890"
    emoji = "üî•"
    emoji_encoded = requests.utils.quote(emoji)
    url = f"{base_url1}/channels/{channel_id}/messages/{invalid_message_id}/reactions/{emoji_encoded}/@me"
    response = requests.put(url, headers=headers)
    assert response.status_code == 400, "Expected 400 for adding reaction to nonexistent message, but got a different status code."
    print("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é' –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

def test_remove_reaction_from_nonexistent_message(base_url1, channel_id, headers):
    invalid_message_id = "12345678901234567890"
    emoji = "üî•"
    emoji_encoded = requests.utils.quote(emoji)
    url = f"{base_url1}/channels/{channel_id}/messages/{invalid_message_id}/reactions/{emoji_encoded}/@me"
    response = requests.delete(url, headers=headers)
    assert response.status_code == 400, "Expected 400 for removing reaction from nonexistent message, but got a different status code."
    print("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç '–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
