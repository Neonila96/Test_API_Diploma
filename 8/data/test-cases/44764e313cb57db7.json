{"uid":"44764e313cb57db7","name":"test_get_message_with_invalid_id","fullName":"test_API#test_get_message_with_invalid_id","historyId":"4a966d73c6c10b7fbec3082a81f2edf8","time":{"start":1730215292354,"stop":1730215292483,"duration":129},"status":"failed","statusMessage":"AssertionError: Expected 400 for invalid message ID, but got a different status code.\nassert 401 == 400\n +  where 401 = <Response [401]>.status_code","statusTrace":"base_url1 = 'https://discord.com/api/v10', channel_id = 1286673475565518878\nheaders = {'Authorization': 'Bot MTI4NjYwOTgxOTEzNzk5ODg4Mw.GmX7uA.SM8jqWeGL8kjPrKvWugZyhYZK5d6j40CGjmB-M', 'Content-Type': 'application/json'}\n\n    def test_get_message_with_invalid_id(base_url1, channel_id, headers):\n        invalid_message_id = \"12345678901234567890\"\n        url = f\"{base_url1}/channels/{channel_id}/messages/{invalid_message_id}\"\n        response = requests.get(url, headers=headers)\n>       assert response.status_code == 400, \"Expected 400 for invalid message ID, but got a different status code.\"\nE       AssertionError: Expected 400 for invalid message ID, but got a different status code.\nE       assert 401 == 400\nE        +  where 401 = <Response [401]>.status_code\n\ntest_API.py:78: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url1","time":{"start":1730215291463,"stop":1730215291463,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"channel_id","time":{"start":1730215291464,"stop":1730215291464,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"headers","time":{"start":1730215291464,"stop":1730215291464,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"a05ac1ddafd95edb","name":"Request Headers","source":"a05ac1ddafd95edb.txt","type":"text/plain","size":71}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"afterStages":[],"labels":[{"name":"suite","value":"test_API"},{"name":"host","value":"fv-az1984-468"},{"name":"thread","value":"2062-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_API"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":8},"items":[{"uid":"e09c0120acfd08f7","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/7//#testresult/e09c0120acfd08f7","status":"failed","statusDetails":"AssertionError: Expected 400 for invalid message ID, but got a different status code.\nassert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1730214930492,"stop":1730214930625,"duration":133}},{"uid":"1f1202d14ce0f34b","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/6//#testresult/1f1202d14ce0f34b","status":"broken","statusDetails":"_pytest.fixtures.FixtureLookupError: ('headers', <FixtureRequest for <Function test_get_message_with_invalid_id>>)","time":{"start":1730214389053,"stop":1730214389053,"duration":0}},{"uid":"cae2beedc9a5543f","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/5//#testresult/cae2beedc9a5543f","status":"failed","statusDetails":"AssertionError: Expected 400 for invalid message ID, but got a different status code.\nassert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1730210127850,"stop":1730210127959,"duration":109}},{"uid":"ddb35d3cbf612a05","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/4//#testresult/ddb35d3cbf612a05","status":"failed","statusDetails":"AssertionError: Expected 400 for invalid message ID, but got a different status code.\nassert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1730210042858,"stop":1730210042951,"duration":93}},{"uid":"efaba1306e3c5ee7","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/3//#testresult/efaba1306e3c5ee7","status":"failed","statusDetails":"AssertionError: Expected 400 for invalid message ID, but got 401: {\"message\": \"401: Unauthorized\", \"code\": 0}\nassert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1730209053312,"stop":1730209053411,"duration":99}},{"uid":"af286cfd1e2b37c3","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/2//#testresult/af286cfd1e2b37c3","status":"failed","statusDetails":"AssertionError: Expected 400 for invalid message ID, but got 401: {\"message\": \"401: Unauthorized\", \"code\": 0}\nassert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1730208045527,"stop":1730208045683,"duration":156}},{"uid":"652492e73393e0b1","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/1//#testresult/652492e73393e0b1","status":"passed","time":{"start":1730207690268,"stop":1730207690398,"duration":130}}]},"tags":[]},"source":"44764e313cb57db7.json","parameterValues":[]}