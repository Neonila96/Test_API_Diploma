{"uid":"7c236c54d21d516","name":"test_create_message_without_content","fullName":"test_API#test_create_message_without_content","historyId":"e6b251a8b4efccb9e97e657ba14117fb","time":{"start":1730215292227,"stop":1730215292350,"duration":123},"status":"failed","statusMessage":"AssertionError: Expected 400 for empty content, but got a different status code.\nassert 401 == 400\n +  where 401 = <Response [401]>.status_code","statusTrace":"base_url1 = 'https://discord.com/api/v10', channel_id = 1286673475565518878\nheaders = {'Authorization': 'Bot MTI4NjYwOTgxOTEzNzk5ODg4Mw.GmX7uA.SM8jqWeGL8kjPrKvWugZyhYZK5d6j40CGjmB-M', 'Content-Type': 'application/json'}\n\n    def test_create_message_without_content(base_url1, channel_id, headers):\n        url = f\"{base_url1}/channels/{channel_id}/messages\"\n        data = {\n            \"content\": \"\"\n        }\n        response = requests.post(url, headers=headers, json=data)\n>       assert response.status_code == 400, \"Expected 400 for empty content, but got a different status code.\"\nE       AssertionError: Expected 400 for empty content, but got a different status code.\nE       assert 401 == 400\nE        +  where 401 = <Response [401]>.status_code\n\ntest_API.py:71: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url1","time":{"start":1730215291463,"stop":1730215291463,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"channel_id","time":{"start":1730215291464,"stop":1730215291464,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"headers","time":{"start":1730215291464,"stop":1730215291464,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"a05ac1ddafd95edb","name":"Request Headers","source":"a05ac1ddafd95edb.txt","type":"text/plain","size":71}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"afterStages":[],"labels":[{"name":"suite","value":"test_API"},{"name":"host","value":"fv-az1984-468"},{"name":"thread","value":"2062-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_API"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":8},"items":[{"uid":"4b2435b8a158826e","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/7//#testresult/4b2435b8a158826e","status":"failed","statusDetails":"AssertionError: Expected 400 for empty content, but got a different status code.\nassert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1730214930373,"stop":1730214930487,"duration":114}},{"uid":"d8fd695928138cb7","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/6//#testresult/d8fd695928138cb7","status":"broken","statusDetails":"_pytest.fixtures.FixtureLookupError: ('headers', <FixtureRequest for <Function test_create_message_without_content>>)","time":{"start":1730214389051,"stop":1730214389051,"duration":0}},{"uid":"b2ca6853338a96ad","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/5//#testresult/b2ca6853338a96ad","status":"failed","statusDetails":"AssertionError: Expected 400 for empty content, but got a different status code.\nassert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1730210127737,"stop":1730210127845,"duration":108}},{"uid":"7a52b6e1b56e73a","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/4//#testresult/7a52b6e1b56e73a","status":"failed","statusDetails":"AssertionError: Expected 400 for empty content, but got a different status code.\nassert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1730210042746,"stop":1730210042853,"duration":107}},{"uid":"880a358ae62fb2a5","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/3//#testresult/880a358ae62fb2a5","status":"failed","statusDetails":"AssertionError: Expected 400 for empty content, but got 401: {\"message\": \"401: Unauthorized\", \"code\": 0}\nassert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1730209053198,"stop":1730209053307,"duration":109}},{"uid":"81b98c64e8fa6817","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/2//#testresult/81b98c64e8fa6817","status":"failed","statusDetails":"AssertionError: Expected 400 for empty content, but got 401: {\"message\": \"401: Unauthorized\", \"code\": 0}\nassert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1730208045443,"stop":1730208045522,"duration":79}},{"uid":"814e63be6f207abb","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/1//#testresult/814e63be6f207abb","status":"passed","time":{"start":1730207690128,"stop":1730207690266,"duration":138}}]},"tags":[]},"source":"7c236c54d21d516.json","parameterValues":[]}