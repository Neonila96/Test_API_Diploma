{"uid":"28569bc1d51c3a47","name":"test_remove_reaction_from_nonexistent_message","fullName":"test_API#test_remove_reaction_from_nonexistent_message","historyId":"105330e664a992c9f5100d1af63282ab","time":{"start":1730207690533,"stop":1730207690671,"duration":138},"status":"failed","statusMessage":"AssertionError: Expected 400 for removing reaction from nonexistent message, but got 429\nassert 429 == 400\n +  where 429 = <Response [429]>.status_code","statusTrace":"base_url1 = 'https://discord.com/api/v10', channel_id = 1286673475565518878\nheaders = {'Authorization': 'Bot MTI4NjYwOTgxOTEzNzk5ODg4Mw.GmX7uA.SM8jqWeGL8kjPrKvWugZyhYZK5d6j40CGjmB-M'}\n\n    def test_remove_reaction_from_nonexistent_message(base_url1, channel_id, headers):\n        invalid_message_id = \"12345678901234567890\"  # Не существующий ID\n        emoji = \"\uD83D\uDD25\"\n        emoji_encoded = requests.utils.quote(emoji)\n        url = f\"{base_url1}/channels/{channel_id}/messages/{invalid_message_id}/reactions/{emoji_encoded}/@me\"\n        response = requests.delete(url, headers=headers)\n>       assert response.status_code == 400, \"Expected 400 for removing reaction from nonexistent message, but got {}\".format(response.status_code)\nE       AssertionError: Expected 400 for removing reaction from nonexistent message, but got 429\nE       assert 429 == 400\nE        +  where 429 = <Response [429]>.status_code\n\ntest_API.py:120: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url1","time":{"start":1730207687018,"stop":1730207687018,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"headers","time":{"start":1730207687019,"stop":1730207687019,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"channel_id","time":{"start":1730207687019,"stop":1730207687019,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"suite","value":"test_API"},{"name":"host","value":"fv-az1242-663"},{"name":"thread","value":"2158-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_API"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"28569bc1d51c3a47.json","parameterValues":[]}