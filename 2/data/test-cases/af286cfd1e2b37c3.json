{"uid":"af286cfd1e2b37c3","name":"test_get_message_with_invalid_id","fullName":"test_API#test_get_message_with_invalid_id","historyId":"4a966d73c6c10b7fbec3082a81f2edf8","time":{"start":1730208045527,"stop":1730208045683,"duration":156},"status":"failed","statusMessage":"AssertionError: Expected 400 for invalid message ID, but got 401: {\"message\": \"401: Unauthorized\", \"code\": 0}\nassert 401 == 400\n +  where 401 = <Response [401]>.status_code","statusTrace":"base_url1 = 'https://discord.com/api/v10', channel_id = 1286673475565518878\nheaders = {'Authorization': 'Bot MTI4NjYwOTgxOTEzNzk5ODg4Mw.GmX7uA.SM8jqWeGL8kjPrKvWugZyhYZK5d6j40CGjmB-M', 'Content-Type': 'application/json'}\n\n    def test_get_message_with_invalid_id(base_url1, channel_id, headers):\n        invalid_message_id = \"12345678901234567890\"  # Не существующий ID\n        url = f\"{base_url1}/channels/{channel_id}/messages/{invalid_message_id}\"\n        response = requests.get(url, headers=headers)\n>       assert response.status_code == 400, f\"Expected 400 for invalid message ID, but got {response.status_code}: {response.text}\"\nE       AssertionError: Expected 400 for invalid message ID, but got 401: {\"message\": \"401: Unauthorized\", \"code\": 0}\nE       assert 401 == 400\nE        +  where 401 = <Response [401]>.status_code\n\ntest_API.py:99: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url1","time":{"start":1730208044695,"stop":1730208044695,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"headers","time":{"start":1730208044696,"stop":1730208044696,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"channel_id","time":{"start":1730208044696,"stop":1730208044696,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"suite","value":"test_API"},{"name":"host","value":"fv-az885-39"},{"name":"thread","value":"2103-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_API"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"652492e73393e0b1","reportUrl":"https://Neonila96.github.io/Test_API_Diploma/1//#testresult/652492e73393e0b1","status":"passed","time":{"start":1730207690268,"stop":1730207690398,"duration":130}}]},"tags":[]},"source":"af286cfd1e2b37c3.json","parameterValues":[]}